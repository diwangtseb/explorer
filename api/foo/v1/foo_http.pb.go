// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type FooHTTPServer interface {
	CreateFoo(context.Context, *CreateFooRequest) (*CreateFooReply, error)
}

func RegisterFooHTTPServer(s *http.Server, srv FooHTTPServer) {
	r := s.Route("/")
	r.GET("/createexplorer/{name}", _Foo_CreateFoo0_HTTP_Handler(srv))
}

func _Foo_CreateFoo0_HTTP_Handler(srv FooHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFooRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/explorer.v1.Foo/CreateFoo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFoo(ctx, req.(*CreateFooRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFooReply)
		return ctx.Result(200, reply)
	}
}

type FooHTTPClient interface {
	CreateFoo(ctx context.Context, req *CreateFooRequest, opts ...http.CallOption) (rsp *CreateFooReply, err error)
}

type FooHTTPClientImpl struct {
	cc *http.Client
}

func NewFooHTTPClient(client *http.Client) FooHTTPClient {
	return &FooHTTPClientImpl{client}
}

func (c *FooHTTPClientImpl) CreateFoo(ctx context.Context, in *CreateFooRequest, opts ...http.CallOption) (*CreateFooReply, error) {
	var out CreateFooReply
	pattern := "/createexplorer/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/explorer.v1.Foo/CreateFoo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
