// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: explorer/v1/explorer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FooClient is the client API for Foo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooClient interface {
	CreateFoo(ctx context.Context, in *CreateFooRequest, opts ...grpc.CallOption) (*CreateFooReply, error)
	UpdateFoo(ctx context.Context, in *UpdateFooRequest, opts ...grpc.CallOption) (*UpdateFooReply, error)
	DeleteFoo(ctx context.Context, in *DeleteFooRequest, opts ...grpc.CallOption) (*DeleteFooReply, error)
	GetFoo(ctx context.Context, in *GetFooRequest, opts ...grpc.CallOption) (*GetFooReply, error)
	ListFoo(ctx context.Context, in *ListFooRequest, opts ...grpc.CallOption) (*ListFooReply, error)
}

type explorerClient struct {
	cc grpc.ClientConnInterface
}

func NewFooClient(cc grpc.ClientConnInterface) FooClient {
	return &explorerClient{cc}
}

func (c *explorerClient) CreateFoo(ctx context.Context, in *CreateFooRequest, opts ...grpc.CallOption) (*CreateFooReply, error) {
	out := new(CreateFooReply)
	err := c.cc.Invoke(ctx, "/explorer.v1.Foo/CreateFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) UpdateFoo(ctx context.Context, in *UpdateFooRequest, opts ...grpc.CallOption) (*UpdateFooReply, error) {
	out := new(UpdateFooReply)
	err := c.cc.Invoke(ctx, "/explorer.v1.Foo/UpdateFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) DeleteFoo(ctx context.Context, in *DeleteFooRequest, opts ...grpc.CallOption) (*DeleteFooReply, error) {
	out := new(DeleteFooReply)
	err := c.cc.Invoke(ctx, "/explorer.v1.Foo/DeleteFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) GetFoo(ctx context.Context, in *GetFooRequest, opts ...grpc.CallOption) (*GetFooReply, error) {
	out := new(GetFooReply)
	err := c.cc.Invoke(ctx, "/explorer.v1.Foo/GetFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorerClient) ListFoo(ctx context.Context, in *ListFooRequest, opts ...grpc.CallOption) (*ListFooReply, error) {
	out := new(ListFooReply)
	err := c.cc.Invoke(ctx, "/explorer.v1.Foo/ListFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooServer is the server API for Foo service.
// All implementations must embed UnimplementedFooServer
// for forward compatibility
type FooServer interface {
	CreateFoo(context.Context, *CreateFooRequest) (*CreateFooReply, error)
	UpdateFoo(context.Context, *UpdateFooRequest) (*UpdateFooReply, error)
	DeleteFoo(context.Context, *DeleteFooRequest) (*DeleteFooReply, error)
	GetFoo(context.Context, *GetFooRequest) (*GetFooReply, error)
	ListFoo(context.Context, *ListFooRequest) (*ListFooReply, error)
	mustEmbedUnimplementedFooServer()
}

// UnimplementedFooServer must be embedded to have forward compatible implementations.
type UnimplementedFooServer struct {
}

func (UnimplementedFooServer) CreateFoo(context.Context, *CreateFooRequest) (*CreateFooReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFoo not implemented")
}
func (UnimplementedFooServer) UpdateFoo(context.Context, *UpdateFooRequest) (*UpdateFooReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFoo not implemented")
}
func (UnimplementedFooServer) DeleteFoo(context.Context, *DeleteFooRequest) (*DeleteFooReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFoo not implemented")
}
func (UnimplementedFooServer) GetFoo(context.Context, *GetFooRequest) (*GetFooReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoo not implemented")
}
func (UnimplementedFooServer) ListFoo(context.Context, *ListFooRequest) (*ListFooReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFoo not implemented")
}
func (UnimplementedFooServer) mustEmbedUnimplementedFooServer() {}

// UnsafeFooServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooServer will
// result in compilation errors.
type UnsafeFooServer interface {
	mustEmbedUnimplementedFooServer()
}

func RegisterFooServer(s grpc.ServiceRegistrar, srv FooServer) {
	s.RegisterService(&Foo_ServiceDesc, srv)
}

func _Foo_CreateFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).CreateFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explorer.v1.Foo/CreateFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).CreateFoo(ctx, req.(*CreateFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foo_UpdateFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).UpdateFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explorer.v1.Foo/UpdateFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).UpdateFoo(ctx, req.(*UpdateFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foo_DeleteFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).DeleteFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explorer.v1.Foo/DeleteFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).DeleteFoo(ctx, req.(*DeleteFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foo_GetFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).GetFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explorer.v1.Foo/GetFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).GetFoo(ctx, req.(*GetFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foo_ListFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).ListFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/explorer.v1.Foo/ListFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).ListFoo(ctx, req.(*ListFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Foo_ServiceDesc is the grpc.ServiceDesc for Foo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Foo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "explorer.v1.Foo",
	HandlerType: (*FooServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFoo",
			Handler:    _Foo_CreateFoo_Handler,
		},
		{
			MethodName: "UpdateFoo",
			Handler:    _Foo_UpdateFoo_Handler,
		},
		{
			MethodName: "DeleteFoo",
			Handler:    _Foo_DeleteFoo_Handler,
		},
		{
			MethodName: "GetFoo",
			Handler:    _Foo_GetFoo_Handler,
		},
		{
			MethodName: "ListFoo",
			Handler:    _Foo_ListFoo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "explorer/v1/explorer.proto",
}
